{"version":3,"sources":["components/Loader.jsx","components/Model.jsx","App.js","index.js"],"names":["loaderStyle","position","top","left","right","bottom","background","color","fontSize","zIndex","Loader","style","className","Model","props","useGLTF","scene","nodes","materials","useFrame","camera","zoom","THREE","lerp","updateProjectionMatrix","useMemo","traverse","obj","type","receiveShadow","castShadow","Object","assign","wheel003_020_2_Chrome_0","material","metalness","roughness","WhiteCar","envMapIntensity","object","App","useState","setZoom","fallback","onWheel","e","deltaY","prev","height","shadows","fov","attach","args","PresentationControls","speed","global","rotation","Math","PI","polar","Stage","environment","intensity","contactShadow","shadowBias","scale","MeshReflectorMaterial","blur","resolution","mixBlur","mixStrength","depthScale","minDepthThreshold","maxDepthThreshold","ReactDOM","render","document","getElementById"],"mappings":"oOAEMA,EAAc,CAClBC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,WAAY,QACZC,MAAO,QACPC,SAAU,OACVC,OAAQ,KAgBKC,MAbf,WACE,OACE,qBAAKC,MAAOX,EAAZ,SACE,qBAAKY,UAAU,qCAAf,SACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,UACf,qBAAKA,UAAU,kB,uBCmBVC,MAlCf,SAAeC,GACb,MAAoCC,YAClC,4DADMC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,UA8BtB,OAxBAC,aAAS,YAAiB,IAAdC,EAAa,EAAbA,OAEVA,EAAOC,KAAOC,YAAgBC,KAAKH,EAAOC,KAAMP,EAAMO,KAAM,IAC5DD,EAAOI,4BAGTC,mBAAQ,WACNT,EAAMU,UACJ,SAACC,GAAD,MACe,SAAbA,EAAIC,OAAoBD,EAAIE,cAAgBF,EAAIG,YAAa,MAEjEC,OAAOC,OAAOf,EAAMgB,wBAAwBC,SAAU,CACpDC,UAAW,EACXC,UAAW,GACX7B,MAAO,IAAIe,QAAY,UAEzBS,OAAOC,OAAOd,EAAUmB,SAAU,CAChCD,UAAW,EACXD,UAAW,EAEX5B,MAAO,IAAIe,QAAY,QACvBgB,gBAAiB,OAElB,CAACtB,EAAOC,EAAOC,IACX,uCAAWqB,OAAQvB,GAAWF,KCzBxB,SAAS0B,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOpB,EAAP,KAAaqB,EAAb,KAYA,OACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,qBAAKC,QAZW,SAACC,GAGfA,EAAEC,OAAS,GAAKzB,GAAQ,EAC1BqB,GAAQ,SAACK,GAAD,OAAUA,EAHH,MAINF,EAAEC,OAAS,GAAKzB,GAAQ,IACjCqB,GAAQ,SAACK,GAAD,OAAUA,EALH,OAWYpC,MAAO,CAAEqC,OAAQ,SAA5C,SACE,eAAC,IAAD,CACErC,MAAO,CAAEqC,OAAQ,QACjBC,SAAO,EACP7B,OAAQ,CAAE8B,IAAK,IAHjB,UAME,uBAAOC,OAAO,aAAaC,KAAM,CAAC,UAGlC,eAACC,EAAA,EAAD,CACEC,MAAO,IACPC,QAAM,EACNlC,KAAM,IACNmC,SAAU,EAAEC,KAAKC,GAAK,IAAKD,KAAKC,GAAK,EAAG,GACxCC,MAAO,CAAC,EAAGF,KAAKC,GAAK,KALvB,UAOE,cAACE,EAAA,EAAD,CACEC,YAAa,KACbC,UAAW,IACXC,eAAe,EACfC,YAAa,KAJf,SAME,cAAC,EAAD,CAAOC,MAAO,KAAO5C,KAAMA,MAG7B,uBAAMmC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAlC,UACE,+BAAeN,KAAM,CAAC,IAAK,OAC3B,cAACc,EAAA,EAAD,CACEC,KAAM,CAAC,GAAI,IACXC,WAAY,KACZC,QAAS,EACTC,YAAa,GACblC,UAAW,IACXmC,WAAY,EACZC,kBAAmB,GACnBC,kBAAmB,IACnBlE,MAAM,UACN4B,UAAW,iBC3D3BuC,IAASC,OAAO,cAACnC,EAAD,IAASoC,SAASC,eAAe,W","file":"static/js/main.24330798.chunk.js","sourcesContent":["import React from \"react\";\n\nconst loaderStyle = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  background: \"black\",\n  color: \"white\",\n  fontSize: \"2rem\",\n  zIndex: 100,\n};\n\nfunction Loader() {\n  return (\n    <div style={loaderStyle}>\n      <div className=\"loader-container arc-rotate-double\">\n        <div className=\"loader\">\n          <div className=\"arc-1\"></div>\n          <div className=\"arc-2\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import { useMemo, useLayoutEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\n\nfunction Model(props) {\n  const { scene, nodes, materials } = useGLTF(\n    \"https://electromorphous.github.io/CustomWheels/lambo.glb\"\n  );\n\n  // console.log(materials.WhiteCar);\n\n  useFrame(({ camera }) => {\n    // console.log(camera);\n    camera.zoom = THREE.MathUtils.lerp(camera.zoom, props.zoom, 0.1);\n    camera.updateProjectionMatrix();\n  });\n\n  useMemo(() => {\n    scene.traverse(\n      (obj) =>\n        obj.type === \"Mesh\" && (obj.receiveShadow = obj.castShadow = true)\n    );\n    Object.assign(nodes.wheel003_020_2_Chrome_0.material, {\n      metalness: 0,\n      roughness: 0.4,\n      color: new THREE.Color(\"#222\"),\n    });\n    Object.assign(materials.WhiteCar, {\n      roughness: 1,\n      metalness: 0,\n      // emissive: new THREE.Color(\"#000000\"),\n      color: new THREE.Color(\"#777\"),\n      envMapIntensity: 0.5,\n    });\n  }, [scene, nodes, materials]);\n  return <primitive object={scene} {...props} />;\n}\n\nexport default Model;\n","import { Suspense, useState, useEffect } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport {\n  MeshReflectorMaterial,\n  Environment,\n  Stage,\n  PresentationControls,\n} from \"@react-three/drei\";\nimport Loader from \"./components/Loader\";\nimport Model from \"./components/Model\";\n\nexport default function App() {\n  const [zoom, setZoom] = useState(1);\n\n  const handleWheel = (e) => {\n    const interval = 0.2;\n\n    if (e.deltaY < 0 && zoom <= 2) {\n      setZoom((prev) => prev + interval);\n    } else if (e.deltaY > 0 && zoom >= 0.6) {\n      setZoom((prev) => prev - interval);\n    }\n  };\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <div onWheel={handleWheel} style={{ height: \"100vh\" }}>\n        <Canvas\n          style={{ height: \"100%\" }}\n          shadows\n          camera={{ fov: 31 }}\n          // resize={{ scroll: true, debounce: { scroll: 50, resize: 0 } }}\n        >\n          <color attach=\"background\" args={[\"#000\"]} />\n          {/* <fog attach=\"fog\" args={[\"#fff\", 10, 200]} /> */}\n          {/* <Environment path=\"https://electromorphous.github.io/CustomWheels/Environments/cube\" /> */}\n          <PresentationControls\n            speed={1.7}\n            global\n            zoom={0.95}\n            rotation={[-Math.PI / 47, -Math.PI / 5, 0]}\n            polar={[0, Math.PI / 2.5]}\n          >\n            <Stage\n              environment={null}\n              intensity={0.75}\n              contactShadow={false}\n              shadowBias={-0.015}\n            >\n              <Model scale={0.001} zoom={zoom} />\n            </Stage>\n\n            <mesh rotation={[-Math.PI / 2, 0, 0]}>\n              <planeGeometry args={[500, 500]} />\n              <MeshReflectorMaterial\n                blur={[30, 20]}\n                resolution={1024}\n                mixBlur={1}\n                mixStrength={50}\n                roughness={0.75}\n                depthScale={0}\n                minDepthThreshold={0.4}\n                maxDepthThreshold={1.4}\n                color=\"#101010\"\n                metalness={0}\n              />\n            </mesh>\n          </PresentationControls>\n        </Canvas>\n      </div>\n    </Suspense>\n  );\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport \"./Sass/index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}